{"version":3,"sources":["components/Header.js","components/Noticia.js","components/ListaNoticias.js","components/Buscador.js","services/categorias.service.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","titulo","react_default","a","createElement","className","href","Noticia","noticia","title","urlToImage","url","description","source","imagen","src","alt","name","target","rel","ListaNoticias","props","noticias","map","components_Noticia","key","Buscador","state","categoriaSelect","cambiarCategoria","e","_this","consultarNoticias","value","categorias","this","onChange","cat","Component","App","_callee","categoria","respuesta","respuestaJSON","articulos","regenerator_default","wrap","_context","prev","next","concat","fetch","sent","json","Object","toConsumableArray","articles","setState","stop","iniciarCategorias","categoriasService","react","components_Header","components_Buscador","components_ListaNoticias","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2054573e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from  'prop-types'\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav className = \"nav-wrapper light-blue darken-3\">\r\n            <a href=\"#!\" className = \"brand-logo center\">{titulo}</a>\r\n        </nav>\r\n     );\r\n\r\n}\r\n \r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired,\r\n}\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Noticia = ({noticia}) => {\r\n    //extraer datos \r\n    const { title , urlToImage , url , \r\n        description ,source } = noticia ;\r\n\r\n    // cargar la imagen cuando este disponible\r\n    const imagen = (urlToImage) ?\r\n        <div className=\"card-image\">\r\n            <img src={urlToImage} alt={title}/>\r\n            <span className=\"card-title\">{source.name}</span>\r\n        </div>\r\n        :null\r\n    \r\n    return (\r\n        <div className=\"col s12 m6 l4\">\r\n            <div className=\"card\">\r\n                {imagen}\r\n                <div className = \"card-content\">\r\n                    <h3>{title}</h3>\r\n                    <p>{description}</p>\r\n                </div>\r\n                <div className =\"card-action\">\r\n                    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"waves-effect waves-light btn\">\r\n                        Ver Más\r\n\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n Noticia.propTypes = {\r\n     noticia : PropTypes.object.isRequired\r\n }\r\nexport default Noticia;","import React from 'react';\r\nimport Noticia from './Noticia';\r\nimport PropTypes from 'prop-types'\r\nconst ListaNoticias = (props) => {\r\n    const noticias = props.noticias;\r\n    return ( \r\n        <div className=\"row\">\r\n            {noticias.map(noticia => \r\n                <Noticia noticia = {noticia} key = {noticia.url}/>\r\n            )}\r\n        </div>\r\n     );\r\n}\r\nListaNoticias.propTypes = {\r\n    noticias : PropTypes.array.isRequired\r\n}\r\nexport default ListaNoticias;","import React ,{ Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nclass Buscador extends Component {\r\n    state = { categoriaSelect:'' }\r\n   \r\n    cambiarCategoria = (e) => {\r\n        this.props.consultarNoticias(e.target.value);\r\n    }\r\n    render() { \r\n        const { categorias } = this.props;\r\n        return ( \r\n            <div className=\"buscador row\">\r\n                <div className = \"col s12 m8 offset-m2\">\r\n                    <form>\r\n                        <h2>Encuentra noticias por Categoría</h2>\r\n                        <div className = \"input-field col s12\">\r\n                            <select\r\n                                onChange={this.cambiarCategoria}\r\n                            >\r\n                                { categorias.map( cat => \r\n                                    <option value={cat.value} key={cat.value}>\r\n                                        {cat.title}\r\n                                    </option>\r\n                                    ) }\r\n                            </select>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\nBuscador.propTypes = {\r\n    consultarNoticias : PropTypes.func.isRequired,\r\n    categorias : PropTypes.func.isRequired\r\n}\r\nexport default Buscador;","export const categorias = [\r\n    { value:'general' , title:'General'},\r\n    { value:'business' , title:'Negocios'},\r\n    { value:'entertainment' , title:'Entretenimiento'},\r\n    { value:'health' , title:'Salud'},\r\n    { value:'science' , title:'Ciencia'},\r\n    { value:'sports' , title:'Deportes'},\r\n    { value:'technology' , title:'Tecnología'},\r\n  ];","import React , { Component , Fragment } from 'react';\nimport Header from './components/Header'\nimport ListaNoticias from './components/ListaNoticias';\nimport Buscador from './components/Buscador';\nimport { categorias as categoriasService } from './services/categorias.service'\nclass App extends Component {\n  state = { noticias : [] , categorias : [] }\n\n  componentWillMount(){\n    this.iniciarCategorias();\n    this.consultarNoticias('general');\n  }\n  iniciarCategorias(){\n    const categorias = categoriasService;\n    this.setState({categorias});\n    \n}\n  consultarNoticias = async (categoria) => {\n    const url = `https://newsapi.org/v2/top-headlines?country=ar&category=${categoria}&apiKey=eefcda8ffc1e4243a0e29ef31b800563`\n    const respuesta = await fetch(url);\n    const respuestaJSON = await respuesta.json();\n    const articulos = [...respuestaJSON.articles];\n    this.setState({noticias : articulos });\n  }\n  render() { \n    return ( \n      <Fragment>\n        <Header titulo = \"Noticias\"/>\n        <div className = \"container white contenedor-noticias\">\n          <Buscador consultarNoticias = {this.consultarNoticias}\n           categorias = {this.state.categorias}/>\n          <ListaNoticias noticias = {this.state.noticias} />\n        </div>\n      </Fragment>\n    \n     );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}